package projecteuler.problem02;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 */

/**
 * Solution:
 * f(n) = f(n-1) + f(n-2) = 2f(n-2) + f(n-3) = 3f(n-3) + 2f(n-4) = 3f(n-3) + f(n-4) + f(n-5) + f(n-6) =
 * = 4f(n-3) + f(n-6)
 * f(n) = 4f(n-3) + f(n-6)
 * As we know every third term of Fibonacci sequence is even.
 * With formula f(n) = 4f(n-3) + f(n-6) we will be counting only even-valued terms, considering
 * f0 = 0, f3 = 2, f6 = 4f3 + f0, f9 = 4f6 + f3, ..., f(n) = 4f(n-3) + f(n-6).
 */

public class Problem02Solution03 {
    public static void main(String[] args) {
        System.out.println(Solution03.solve());
    }
}

class Solution03 {
    static final int BORDER = 4_000_000;

    static long solve() {
        long sum = 2L;
        int f0 = 0;
        int f3 = 2;
        int fnext = 4 * f3 + f0;
        while (fnext <= BORDER) {
            sum += fnext;
            f0 = f3;
            f3 = fnext;
            fnext = 4 * f3 + f0;
        }
        return sum;
    }
}
